#------------------------clean base.html--------------------------------------------------------

		<!-- Jquery - CSV -->
		<script src="{% static 'dailyControl/src/jquery.csv.min.js' %}"></script>
		<!-- Excel formula -->
		<script src="{% static 'dailyControl/src/excel-formula.min.js' %}"></script>
#------------------------cleaning product model sqlite---------------------------------
#~/models.py

#remind handle uniqueness
class Product(models.Model):
	name=models.CharField(max_length=80)
	quantity=models.IntegerField()
	unit_price=models.DecimalField(max_digits=6,decimal_places=2)
	
	def __str__(self):
		return self.name
#~/admin.py
from .models import Product

admin.site.register(Product)

#~/forms.py
from django import forms
from .models import Product

#check if renders id
#in dict 'labels', you change the labels rendered in the form 
class ProductForm(forms.ModelForm):
	class Meta:
		model = Product
		fields = '__all__'
		labels = {
			'name':'Nombre',
			'quantity':'Cantidad',
			'unit_price':'Precio unitario',
		}
#------------------------navbar item--------------------------------------------
<li class="nav-item">
				    <a class="nav-link" href="{% url 'cuadrar' %}">Cuadrar</a>
				  </li>	
#------------------------cleaning cuadrar.html---------------------------------
		//get current date on yyyy-mm-dd format
			function getCurrentDate(){
				let date = new Date($.now());
				let dateString = (date.getFullYear() + '-'
				+ ('0' + (date.getMonth() + 1)).slice(-2)
				+ '-' + ('0' + (date.getDate())).slice(-2));
				return dateString;
			}			

		function getDefaultData2(){
			let default_data=[
					['','','Pantalon  mujer','=ADD_(A1,B1)','1d','=SUBSTRACT_(D1,E1)','=COMPUTE_SOLD(F1,H1)','10'],
					['','','Extra','=ADD_(A2,B2)','1d','=SUBSTRACT_(D2,E2)','=COMPUTE_SOLD(F2,H2)','13'],
					['','','Boxer','=ADD_(A3,B3)','1d','=SUBSTRACT_(D3,E3)','=COMPUTE_SOLD(F3,H3)','1.666666667'],
					['','','2x5','=ADD_(A4,B4)','1d','=SUBSTRACT_(D4,E4)','=COMPUTE_SOLD(F4,H4)','2.5'],
					['','','x1','=ADD_(A5,B5)','1d','=SUBSTRACT_(D5,E5)','=COMPUTE_SOLD(F5,H5)','1'],				
					['','','Short','=ADD_(A6,B6)','1d','=SUBSTRACT_(D6,E6)','=COMPUTE_SOLD(F6,H6)','5'],
					['','','Pantalon hombre','=ADD_(A7,B7)','1d','=SUBSTRACT_(D7,E7)','=COMPUTE_SOLD(F7,H7)','10'],
					['','','Vermuda','=ADD_(A8,B8)','1d','=SUBSTRACT_(D8,E8)','=COMPUTE_SOLD(F8,H8)','10'],						
					['','','','','','Total:','=sum_v(G1:G8)',''],
				];			
			//	['','','','','','Total','=sum_v(G1:G7)'],
			return default_data;
		}


			$('#button_computeVentaTotalTeorico').click(function(){			
				console.log(ventaTotalTeorico);
			});


		//quit this and put it in another view
		$('#button_update').on('click', function () {
			let today=parseDate($( "#datepicker" ).datepicker("getDate"));
			let data_={};
			let data = $('#mytable').jexcel('getData');
			data_.ss_cuadre=data;

			headers_update={'X-HTTP-Method-Override':'PATCH'};			
			postData(url+today,data_,headers_update).done(function(){				
				alert("Los datos del cuadre se sobreescribieron con éxito.");//remind error of edit in cascade			
			}).fail(function(error){			
					alert("Ocurrió un error de red, mientras se guardaban los datos.");	//net error
			});						
		});	


/*-----------------------view for add merca--------------------------*/
def nueva_mercaderia(request):
		if request.method=='POST':
			form=ProductForm(request.POST)
			if form.is_valid():
				form.save()
				return redirect('nueva_mercaderia')			
		else:
			form=ProductForm()
		product_list=Product.objects.all()
		context={
			'form':form,
			'product_list':product_list
		}
		return render(request, 'dailyControl/nueva_mercaderia.html',context)
/*-----------------------Convert, from data to table, and viceversa--------------------------*/
//depends on id of table
		function getDatafromTable(){				
			//let ss = $('#mytable').jexcel('getData');	//spreadsheet

			let col_ingresa=$('#mytable').jexcel('getColumnData',0);
			let col_mercaderia=$('#mytable').jexcel('getColumnData',2);
			let col_queda=$('#mytable').jexcel('getColumnData',4);
			let col_precio=$('#mytable').jexcel('getColumnData',7);

			//console.log(typeof col_ingresa);
			let data={
						"col_ingresa":col_ingresa,
						"col_mercaderia":col_mercaderia,
						"col_queda":col_queda,
						"col_precio":col_precio,
			};						
			//console.log(JSON.stringify(data)); // to see how is data
			//console.log($.csv.fromArrays(ss)); //in case you need csv
			return data;
		}

		//depends on data format returned by apirest
		//handle error on ingresa 0 and substract with 0 in table
		function getTableFromData(data){
					//console.log(JSON.stringify(data.col_ingresa));

					//cooking the response					
				
					//get columns from apirest
					let col_mercaderia=data.col_mercaderia;
					//col_queda from previous day now will be col_habia of current day, is logic's business
					let col_habia=data.col_queda;
					let col_precio=data.col_precio;
				
					//pick up length. All columns are supposed to have the same length.
					let l=col_mercaderia.length;			
					
					//cooking the rest of columns					
					let col_ingresa=Array(l).fill('0d0');//empty
					let col_hay=makeColum_setFunction(l,'ADD_',['A','B']);//set ADD_
					let col_queda=Array(l).fill('');//empty
					let col_vendido=makeColum_setFunction(l,'SUBSTRACT_',['D','E']);//set SUBSTRACT_
					let col_money=makeColum_setFunction(l,'COMPUTE_SOLD',['F','H']);//set COMPUTE_SOLD

					//we use the following order of columns in a  matrix, to latter transpose it.					
					/*
						['A:Ingresa',
						 'B:Habia',
						 'C:Mercaderia',
						 'D:Hay',
						 'E:Queda',
						 'F:Vendido',
						 'G:$-Money',
						 'H:Precio']
						*/							
				  let m=[
							col_ingresa,
							col_habia,
							col_mercaderia,
							col_hay,
							col_queda,
							col_vendido,
							col_money,
							col_precio
					];
					
					let freshTable=transpose(m);
					return freshTable;
		}

#------------------------back load merca from db---------------------------------
<!--Load crispy form tag-->
{% load crispy_forms_tags %}

{% block content %}
		<!--h2>Nueva mercaderia</h2-->    	

			{% if product_list %}
			<h3>Mercaderia actual</h3>
			<!-- START TABLE PRODUCTLIST -->
			<table class="table table-bordered">
			<thead>
				<tr>
				  <th></th> <th>Nombre</th> <th>Cantidad</th> <th>Precio</th>
				</tr>
			</thead>

			<tbody>
				{% for p in product_list %}
					<tr>
				  <th>{{ p.id }}</th> <td>{{ p.name }}</td> <td>{{ p.quantity }}</td>  <td>{{ p.unit_price }}</td>
					</tr>	

				{% endfor %}							
			</tbody>
			</table>	
			<!-- END TABLE PRODUCTLIST -->

			{% else %}
			<p>No existen productos en la base de datos.</p>
			{% endif%}

	<!-- START FORM NEWPRODUCT-->
	<form action="{% url 'nueva_mercaderia' %}" method="POST">
		<h3>Agregar producto</h3>
		{% csrf_token %}	
		{{ form|crispy }}		
  	<button type="submit" class="btn btn-secondary">Guardar</button>
	</form>
	<!-- END FORM NEWPRODUCT -->
{% endblock %}

/*-------------------FUNCTIONS TO AUTO COMPUTE VALUES ON TABLE-------------------*/

		//check typeOfInput function for info about accepted values		
		//the table render empties as 0's, when are retrieved with cell.v
		//there's need to parse numeric values as strings due to split done in typeOfInput function
		//improve the parsing of number into strings.
		function SUBSTRACT_(cell_hay,cell_queda){
				let k1=typeOfInput(cell_hay.v+'');			
				let k2=typeOfInput(cell_queda.v+'');
				if(-1==k1||-1==k2){
					return "error";
				}
				let hay=parseDozensToNumber(cell_hay.v+'',k1);
				let queda=parseDozensToNumber(cell_queda.v+'',k2);				
				let vendido=hay-queda;				
				//console.log("k1"+k1+","+"k2"+","+k2);
				if (4==k1 || 4==k2){				
					return vendido;
				}else{									
					return parseNumberToDozens(vendido);
				}
															
		}

		//check typeOfInput function for info about accepted values		
		//the table render empties as 0's, when are retrieved with cell.v
		//there's need to parse numeric values as strings due to split done in typeOfInput function
		//improve the parsing of number into strings.
		function ADD_(cell_ingresa,cell_habia){		
			let k1=typeOfInput(cell_ingresa.v+'');			
			let k2=typeOfInput(cell_habia.v+'');
			if(-1==k1||-1==k2){
				return "error";
			}
			let ingresa=parseDozensToNumber(cell_ingresa.v+'',k1);			
			let habia=parseDozensToNumber(cell_habia.v+'',k2);		
			let hay=ingresa+habia;
			
			//console.log("k1="+k1+" , "+"k2="+k2);
			//console.log(ingresa);
			//console.log(habia);
			//console.log(hay);
			if (4==k1 || 4==k2){				
				return hay;
			}else{				
				return parseNumberToDozens(hay);
			}
			
		}

		//from cell_vendido expects #d#, string
		//from cell_precio expects number, integer	
		function COMPUTE_SOLD(cell_vendido,cell_precio){
			let k1=typeOfInput(cell_vendido.v+'');	
			if(-1==k1){
				return "error";
			}
			let vendido=parseDozensToNumber(cell_vendido.v+'',k1);
			let money=vendido*cell_precio.v;
			return money;
		}
		
		//for now global var, it works to save vendido total
		var ventaTotalTeorico;
		function sum_v(v){
				let sum=v.reduce((a,b)=>Number(a)+Number(b),0);
				ventaTotalTeorico=sum;
				//console.log(isNaN(ventaTotalTeorico) ? "error" : ventaTotalTeorico);
				return isNaN(ventaTotalTeorico) ? "error" : ventaTotalTeorico;
		}	


		/*------------------FUNCTIONS TO PARSE VALUES FROM, AND TO TABLE-------------------*/		
		
			/*
				take string input and return an integer wich represents its type.
				1 -> 'adb' ; a>0 && b>0 && b<12
				2 -> 'ad' ; a >0
				3 -> b>=0 && b<12
				4 -> b>=0
				-1 -> whichever other input
				note: can be improved by specific regex
			*/
			function typeOfInput(input){
				let patt1=/^\d+d\d+$/;//#d#
				let patt2=/^\d+d$/;//#d
				let patt3=/^\d+$/;//#     
				
				let l=input.split("d");
				// #d# -> adb ; #d -> ad ; # -> b
				let a,b;

				//#d# -> adb
				if(patt1.test(input)){      
				  a=parseInt(l[0],10);
				  b=parseInt(l[1],10);
				  if (a>0 && b>0 && b<12){
					return 1;
				  }else{        
					return -1;//console.log("error on units");
				  }           
				//#d -> ad
				}else if(patt2.test(input)){   
				  a=parseInt(l[0],10);
				  if (a>0){
					return 2;
				  }else{
					return -1;//console.log("error on units"); 
				  }
				//# -> b			
				}else if(patt3.test(input)){ 
				  b=parseInt(l[0],10);
				  if (b>=0 && b<12 ){
					return 3;
				  }else if(b>=0){
					return 4;
				  }else{        
					return -1; //console.log("error on units");
				  }
				}else{
				  return -1; //console.log("error");
				}
			}
			
			/*				
				Takes STRING like 2d3,2d or 2 . Return INT of the total computed value
				Proper k must be provided to treat dozens input properly.
				To get k, use typeOfInput function described above.
			*/
			function parseDozensToNumber(dozens,k){
			  let dozenPart,unitsPart;
			  // #d# -> adb ; #d -> ad ; # -> b
			  let a,b; 
			  let l=dozens.split("d");
			  switch(k){
				//#d# -> adb    
				case 1:
				  a=parseInt(l[0],10);
				  b=parseInt(l[1],10);
				  dozenPart=a*12;
				  unitsPart=b;      
				  return (dozenPart+unitsPart);
				//#d -> ad
				case 2:
				  a=parseInt(l[0],10);
				  dozenPart=a*12;
				  unitsPart=0;      
				  return (dozenPart+unitsPart);
				//# -> 0<=b<12 -> case 3
				//# -> 0<=b -> case 4
				case 3:case 4:
				  b=parseInt(l[0],10);
				  dozenPart=0;
				  unitsPart=b;      
				  return (dozenPart+unitsPart); 				  
				default:
				  return "error_";//to internal maintenance
			  } 
			}			
			

			//takes INT n like an integer number, return STRING like 2d3
			//improve output on lower than 1d, cause it returns like 0d3
			function parseNumberToDozens(n){
				if(n<12&&n>=0){
					return n+'';
				}
				//if passes, at least has 1 dozen
				let dozenPart=Math.trunc(n/12);
				let unitsPart=n%12;
				if(0==unitsPart){
					return dozenPart+'d';
				}else{
					return dozenPart+'d'+unitsPart;
				}
			}	
		/*---------------------FUNCTIONS TO BUILD TABLE-----------------*/
			/*
				take params like:
					let l=5;
					let fname='ADD_';
					let cols=['B','D'];
				return like:
					["=ADD_(B1,D1)", 
					 "=ADD_(B2,D2)", 
					 "=ADD_(B3,D3)", 
					 "=ADD_(B4,D4)", 
					 "=ADD_(B5,D5)"]
			*/		
			function makeColum_setFunction(l,fname,cols){
				let newCol=Array(l).fill('');
				for (let i=0;i<newCol.length;i++){
						let cell_a=cols[0]+(i+1);
						let cell_b=cols[1]+(i+1);
						newCol[i]=''.concat('=',fname,'(',cell_a,',',cell_b,')');
				}
				return newCol;
			}

			//creates a new matrix, be aware on memory.
			function transpose(matrix) {
				const rows = matrix.length, cols = matrix[0].length;
				const grid = [];
				for (let j = 0; j < cols; j++) {
					grid[j] = Array(rows);
				}
				for (let i = 0; i < rows; i++) {
					for (let j = 0; j < cols; j++) {
						grid[j][i] = matrix[i][j];
					}
				}
				return grid;
			}

			
			/*-------------------------------INITIAL LOAD AND HANDLERS---------------------------*/
				let col_mercaderia;
				let col_habia;
				let col_precio;
				
				//col_mercaderia
				{% if product_list %}
					col_mercaderia= [ 
						{% for p in product_list %}				
						"{{ p.name }}",
						{% endfor %}
					]		
				{% else %}
				col_mercaderia=[];
				{% endif %}

				//col_habia
				{% if product_list %}
					col_habia= [ 
						{% for p in product_list %}				
						"{{ p.quantity }}",
						{% endfor %}
					]		
				{% else %}
				col_habia=[];
				{% endif %}

				//col_precio
				{% if product_list %}
					col_precio= [ 
						{% for p in product_list %}				
						"{{ p.unit_price }}",
						{% endfor %}
					]		
				{% else %}
				col_precio=[];
				{% endif %}
		
				console.log(col_mercaderia);						
				console.log(col_habia);				
				console.log(col_precio);

				//pick up length. All columns are supposed to have the same length.
					var l=col_mercaderia.length;					
					//cooking the rest of columns					
					let col_ingresa=Array(l).fill('');//empty
					let col_hay=makeColum_setFunction(l,'ADD_',['A','B']);//set ADD_
					let col_queda=Array(l).fill('');//empty
					let col_vendido=makeColum_setFunction(l,'SUBSTRACT_',['D','E']);//set SUBSTRACT_
					let col_money=makeColum_setFunction(l,'COMPUTE_SOLD',['F','H']);//set COMPUTE_SOLD

				//we use the following order of columns in a  matrix, to latter transpose it.					
					/*
						['A:Ingresa',
						 'B:Habia',
						 'C:Mercaderia',
						 'D:Hay',
						 'E:Queda',
						 'F:Vendido',
						 'G:$-Money',
						 'H:Precio']
						*/							
				  let m=[
							col_ingresa,
							col_habia,
							col_mercaderia,
							col_hay,
							col_queda,
							col_vendido,
							col_money,
							col_precio
					];
					
					let freshTable=transpose(m);
					let foo1='=sum_v(G1:G'.concat(l,')');
					let foo2=Array(5).fill();
					foo2.push('Total:');
					foo2.push(foo1);
					foo2.push('');
					freshTable.push(foo2);

$('#mytable').jexcel({ 
				colHeaders:['Ingresa','-','Mercaderia','-','Queda','Vendido','$','Precio'],
				//minDimensions:[8,7],				
				colWidths: [ 80, 80,150,80,80,80,80,80 ],
				//selectionCopy:false,
				contextMenu:function(){},
				rowDrag:false,
				columnSorting:false,
				allowInsertRow:false,
				allowManualInsertRow:false,	
				allowDeleteRow:false,
				allowInsertColumn:false,
				allowManualInsertColumn:false,
				allowDeleteColumn:false,
			  //tableOverflow:true,				
    		//tableHeight:'300px',
		});
$('#mytable').jexcel('setData',freshTable);

//set columns with functions as readonly
		$('#mytable').jexcel('updateSettings',{ 
				cells: function(cell,col,row){					
					console.log('bf:'+l);
					//l=l+1;//l must be quantity of prendas
					console.log('af:'+l);
					if(col==1||col==2||col==3||col==5||col==6||col==7||row==l){
						$(cell).css('background-color','#F1F5F8');					
						$(cell).css('color','black');					
						$(cell).addClass('readonly');		
					}				
				}				
		});
	
		$( "#datepicker" ).datepicker({
				dateFormat:'yy-mm-dd',
		    changeMonth: true,
		    changeYear: true,
				//minDate:-1,
				maxDate:0,
		  });
			$( "#datepicker" ).datepicker("setDate","0");

//remind add earnings

/*
$('#mytable2').jexcel({ 
				colHeaders:['Mercaderia','Cantidad','Precio'],
				//minDimensions:[1,7],				
				colWidths: [ 150,80,80],
				//selectionCopy:false,
				contextMenu:function(){},
				rowDrag:false,
				columnSorting:false,
				allowInsertRow:false,
				allowManualInsertRow:false,	
				allowDeleteRow:false,
				allowInsertColumn:false,
				allowManualInsertColumn:false,
				allowDeleteColumn:false,
				editable:false
				//data:getDefaultData(),
			  //tableOverflow:true,				
    		//tableHeight:'300px',
		});
*/

#---------------------------------start apuntes with datatable------------------------------------
<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">

		<!-- Jquery -->
		
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>

    <!-- Datatable -->
		<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.19/css/jquery.dataTables.css"> 
		<script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.10.19/js/jquery.dataTables.js"></script>

  </head>
  <body>

    <!------------------------- START MY HTML ------------------>
    <div class="container">
		<h2>Apuntes</h2>    

			<!------------------------START DATATABLE------------------------>
			<table id="table_id" class="display">
					<thead>
						  <tr>
						      <th>$</th>
						      <th>Apunte</th>									
						  </tr>
					</thead>
					<tbody>
						  <tr>
						      <td>20</td>
						      <td>cola</td>								
						  </tr>
						  <tr>
						      <td>5</td>
						      <td>comida</td>
						  </tr>
					 <tr>
						      <td>12</td>
						      <td>guardia</td>
						  </tr>
						  <tr>
						      <td>14</td>
						      <td>yolanda</td>
						  </tr>

 <tr>
						      <td>10</td>
						      <td>yolanda mama</td>
						  </tr>
						  <tr>
						      <td>18</td>
						      <td>yolanda hija</td>
						  </tr>

 <tr>
						      <td>10</td>
						      <td>maribel</td>
						  </tr>
						  <tr>
						      <td>34</td>
						      <td>maribel 2</td>
						  </tr>

 <tr>
						      <td>67</td>
						      <td>maribel 3</td>
						  </tr>
						  <tr>
						      <td>3</td>
						      <td>jugo</td>
						  </tr>


					</tbody>
			</table>
			<!------------------------END DATATABLE------------------------>

	    <table class="table table-striped table-bordered">				    
		    					
			<tr> 					
		      <td ><input type="text" class="form-control" name="nombre" id="apunte_valor"></td>
		      <td ><input type="text" class="form-control" name="servicio" id="apunte_info" ></td>
		      <td > 
					 <input type="submit" class="btn btn-success" id="boton_agregar"value="+"/>
			    </td>		      
		    </tr>	 	
		
		<!--
		    <tr> 
					<td >{{ u.servicio }} </td>
		      <td >{{  u.ciudad}}</td>		      				
		      <td > 				 			
	   		 <input type="submit" class="btn btn-danger" Value="x"/>			 	
 				 </td>	

					<td > 							 
	   		 <input type="submit" class="btn btn-warning" Value="o"/>					
 				 </td>	

				</tr>	
			-->
   
    </div>
    <!------------------------- END MY HTML -------------------->

    <!-- Optional JavaScript -->
		<script>
		$(document).ready( function () {
    	var t=$('#table_id').DataTable({
							pagingType:'numbers',
							dom:'lfipt',
							ordering: false
						 });
			var c=1;
			$('#boton_agregar').click(function() {
					let a_v=$('#apunte_valor').val();
					let a_i=$('#apunte_info').val();
					t.row.add([
						a_v,
						a_i
					]).draw(false);
					t.page('last').draw(false);//pay perfomance on user interaction.
					c++;
					//refresh inputs
					$('#apunte_valor').val('');
					$('#apunte_info').val('');
			});
			
			
		});
	  </script>	
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <!-- <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script> -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>
  </body>
</html>
#-------------------------------------------END APUNTES DATATABLE---------------------------------------------------
